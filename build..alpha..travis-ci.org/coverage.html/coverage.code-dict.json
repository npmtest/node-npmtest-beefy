{"/home/travis/build/npmtest/node-npmtest-beefy/test.js":"/* istanbul instrument in package npmtest_beefy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-beefy/lib.npmtest_beefy.js":"/* istanbul instrument in package npmtest_beefy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_beefy = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_beefy = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-beefy/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-beefy && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_beefy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_beefy\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_beefy.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_beefy.rollup.js'] =\n            local.assetsDict['/assets.npmtest_beefy.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_beefy.__dirname +\n                    '/lib.npmtest_beefy.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-beefy/beefy/index.js":"var setupWatchify = require('./lib/bundlers/watchify.js')\n  , createHandler = require('./lib/create-handler.js')\n  , makeIO = require('./lib/make-io.js')\n  , path = require('path')\n\nvar parseArgs = require('./lib/args-to-options.js')\n\nmodule.exports = beefy\n\nfunction beefy(opts, ready) {\n  var io = makeIO(process, process.stdout, process.stderr)\n\n  opts =\n    typeof opts === 'string' ? {entries: [opts]} :\n    Array.isArray(opts) ? {entries: opts} :\n    opts\n\n  opts.cwd = opts.cwd || path.dirname(module.parent)\n  opts.entries = opts.entries || []\n  opts.bundlerFlags = opts.bundlerFlags || []\n  opts.bundler = opts.bundler || null\n  opts.quiet = opts.quiet === undefined ? true : opts.quiet\n  opts.live = !!opts.live\n  opts.watchify = opts.watchify === undefined ? true : opts.watchify\n\n  var args = ['9999']\n    , innerHandler\n\n  if(opts.cwd) {\n    args.push('--cwd', opts.cwd)\n  }\n\n  if(opts.live) {\n    args.push('--live')\n  }\n\n  if(typeof opts.bundler === 'string') {\n    args.push('--bundler', opts.bundler)\n  }\n\n  if(opts.index) {\n    args.push('--index', opts.index)\n  }\n\n  if('watchify' in opts && !opts.watchify) {\n    args.push('--no-watchify')\n  }\n\n  args.push('--')\n  args = args.concat(opts.bundlerFlags)\n\n  parseArgs(args, opts.cwd, function(err, genOpts) {\n    if(err) {\n      if(ready) {\n        return ready(err)\n      }\n\n      throw err\n    }\n\n    switch(opts.bundler && typeof opts.bundler) {\n      case 'function':\n        genOpts.handler.bundler.command = opts.bundler\n        break\n      case 'object':\n        genOpts.handler.bundler = opts.bundler\n        break\n    }\n\n    genOpts.handler.entries = fixupEntries(opts.entries)\n    genOpts.handler.log = opts.quiet ? false : genOpts.handler.log\n    innerHandler = createHandler(genOpts.handler, io, opts.unhandled)\n  })\n\n  return handler\n\n  function handler(req, resp) {\n    if(!innerHandler) {\n      return setTimeout(handler, 0, req, resp)\n    }\n\n    innerHandler(req, resp)\n  }\n\n  function fixupEntries(entries) {\n    return Array.isArray(entries) ? entries.reduce(toObject, {}) : entries\n\n    function toObject(obj, entry) {\n      entry = path.resolve(opts.cwd, entry)\n\n      obj[entry\n        .replace(opts.cwd, '/')\n        .replace('\\\\', '/')\n        .replace(/\\/+/g, '/')] = entry\n\n      return obj\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-beefy/beefy/lib/bundlers/watchify.js":"module.exports = setupWatchify\n\nvar concat = require('concat-stream')\n  , minimist = require('minimist')\n  , resolve = require('resolve')\n  , through = require('through')\n\nfunction setupWatchify(dir, entryPoints, flags, ready) {\n  var watchify = require(dir)\n\n  resolve('browserify/bin/args.js', {basedir: dir}, onmodule)\n\n  function onmodule(err, browserifyModule) {\n    if(err) {\n      return ready(err)\n    }\n\n    var parseArgs = require(browserifyModule)\n      , watchifies = {}\n      , lastOut = {}\n      , lastErr = {}\n      , closed\n\n    for(var key in entryPoints) {\n      watchifies[entryPoints[key]] = buildWatchify(entryPoints[key])\n    }\n\n    handlePath.bundler = dir\n\n    // NB: this is a backdoor way of preventing retries\n    // in the tests. eventually all bundlers should grow\n    // a `.close()` that allows end users to `.close` a\n    // beefy server.\n    handlePath.close = function() {\n      closed = true\n\n      for(var key in entryPoints) {\n        watchifies[entryPoints[key]].close()\n      }\n    }\n\n    return ready(null, handlePath)\n\n    function handlePath(entryPath) {\n      return watchifies[entryPath]()\n    }\n\n    function buildWatchify(entry) {\n      var watcher = watchify(parseArgs([entry].concat(flags)))\n        , waiting = []\n\n      watcher.on('update', onupdate)\n      watcher.on('error', onerror)\n      onupdate()\n\n      onrequest.close = function() {\n        if(watcher.close) {\n          return watcher.close()\n        }\n      }\n\n      return onrequest\n\n      function onrequest() {\n        var stdout = through()\n          , stderr = through()\n          , io\n\n        io = {stderr: stderr, stdout: stdout}\n\n        fulfillRequest(io)\n\n        return io\n      }\n\n      function fulfillRequest(io) {\n        process.nextTick(function() {\n          lastOut[entry] ? (io.stdout.end(lastOut[entry]), io.stderr.end()) :\n          lastErr[entry] ? (io.stderr.end(lastErr[entry]), io.stdout.end()) :\n          waiting.push(fulfillRequest.bind(null, io))\n        })\n      }\n\n      function onerror(err) {\n        watcher.removeListener('update', onupdate)\n\n        if(!closed) {\n          setTimeout(buildWatchify, minimist(flags).delay || 600, entry)\n            .unref()\n        }\n      }\n\n      function onupdate() {\n        var build = watcher.bundle()\n          , caught\n\n        build.on('error', function(err) {\n          lastErr[entry] = err.stack || (err + '')\n          lastOut[entry] = null\n\n          waiting.slice().forEach(function(fulfill) {\n            fulfill()\n          })\n          waiting.length = 0\n        })\n\n        build.pipe(concat(function(data) {\n          lastErr[entry] = null\n          lastOut[entry] = data\n\n          waiting.slice().forEach(function(fulfill) {\n            fulfill()\n          })\n          waiting.length = 0\n        }))\n      }\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-beefy/beefy/lib/create-handler.js":"module.exports = createServer\n\nvar xtend = require('xtend')\n  , http = require('http')\n  , url = require('url')\n\nvar legacyBundle = require('./handlers/legacy-bundle.js')\n  , defaultIndex = require('./handlers/default-index.js')\n  , liveReload = require('./handlers/live-reload.js')\n  , modernBundle = require('./handlers/bundle.js')\n  , serveStatic = require('./handlers/static.js')\n  , logRequests = require('./handlers/log.js')\n\nfunction createServer(opts, io, innerHandler) {\n  var handlers\n    , handler\n    , inner\n\n  // order is important here. the higher\n  // in the list, the deeper the handler\n  // is in the resolution order.\n  handlers = [\n      defaultIndex\n    , serveStatic\n    , legacyBundle\n    , modernBundle\n    , logRequests\n    , liveReload\n  ]\n\n  handler = innerHandler || _404\n\n  inner = handlers.reduce(function(lhs, rhs) {\n    return rhs(opts, io, lhs)\n  }, handler)\n\n  return beefyMainHandler\n\n  function beefyMainHandler(req, resp) {\n    var parsed = url.parse(req.url, true)\n\n    return inner(this, req, resp, parsed)\n  }\n\n  function _404(server, req, resp, parsed) {\n    resp.writeHead(404, {'content-type': 'text/plain'})\n    resp.end('not found ):')\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-beefy/beefy/lib/handlers/legacy-bundle.js":"module.exports = handleEntryPoints\n\nvar accumError = require('../accumulate-error.js')\n  , spawn = require('child_process').spawn\n  , ansicolors = require('ansicolors')\n\n// opts = {\n//     entries: {\n//         <repr>: <path>\n//     }\n//   , bundler: {\n//         flags: []\n//       , command: \"\"\n//     }\n// }\nfunction handleEntryPoints(opts, io, nextHandler) {\n  var entries = opts.entries\n    , bundlerOpts\n\n  bundlerOpts = opts.bundler\n\n  if(!bundlerOpts || !bundlerOpts.legacy) {\n    return nextHandler\n  }\n\n  if(!opts.entries || !opts.bundler) {\n    return nextHandler\n  }\n\n  return handle\n\n  function handle(server, req, resp, parsed) {\n    if(!(parsed.pathname in entries) && !('browserify' in parsed.query)) {\n      return nextHandler(server, req, resp, parsed)\n    }\n\n    var entryPath = entries[parsed.pathname]\n      , args = bundlerOpts.flags.slice()\n      , bundler\n      , output\n\n    if(entryPath) {\n      args.unshift(entryPath)\n    }\n\n    args.unshift(bundlerOpts.command)\n    parsed.loggedPathname = ansicolors.magenta(\n        parsed.pathname + ' -> ' + args.map(toLocal).join(' ')\n    )\n    args.shift()\n\n    bundler = spawn(bundlerOpts.command, args)\n    bundler.stderr.pipe(accumError(io.error, resp))\n    resp.setHeader('content-type', 'text/javascript')\n    bundler.stdout.pipe(resp)\n  }\n\n  function toLocal(file) {\n    return file.replace(opts.cwd, '.')\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-beefy/beefy/lib/accumulate-error.js":"module.exports = accumError\n\nvar Buffer = require('buffer').Buffer\n  , through = require('through')\n  , path = require('path')\n  , fs = require('fs')\n\nvar DOMError = fs.readFileSync(\n    path.join(__dirname, 'frontend-js', 'error.js')\n  , 'utf8'\n)\n\nfunction accumError(outputError, resp) {\n  var stream = through(write, end)\n    , error = []\n\n  return stream\n\n  function write(buf) {\n    error.push(buf)\n  }\n\n  function end() {\n    if(error.length) {\n      var buffers = []\n\n      for(var i = 0; i < error.length; ++i) {\n        buffers.push(Buffer(error[i]))\n      }\n\n      outputError(Buffer.concat(buffers))\n      resp.end(\n          '(' + DOMError + ')(' + JSON.stringify(error + '') + ')'\n      )\n    }\n\n    stream.queue(null)\n  }\n}\n\n","/home/travis/build/npmtest/node-npmtest-beefy/beefy/lib/handlers/default-index.js":"module.exports = handleDefault\n\nvar ansicolors = require('ansicolors')\n  , path = require('path')\n  , fs = require('fs')\n\nfunction handleDefault(opts, io, nextHandler) {\n  var generatedIndex = opts.generatedIndex\n\n  if(generatedIndex === undefined) {\n    generatedIndex = path.join(__dirname, 'default.html')\n  }\n\n  if(!generatedIndex) {\n    return nextHandler\n  }\n\n  return handle\n\n  function handle(server, req, resp, parsed) {\n    if(!/html/.test(req.headers.accept || '')) {\n      return nextHandler(server, req, resp, parsed)\n    }\n\n    return fs.readFile(generatedIndex, 'utf8', onfile)\n\n    function onfile(err, data) {\n      if(err) {\n        io.error(err.stack)\n\n        return nextHandler(server, req, resp, parsed)\n      }\n\n      parsed.loggedPathname = ansicolors.blue(parsed.pathname) +\n        ' (' + ansicolors.blue('generated') + ')'\n      resp.setHeader('content-type', 'text/html; charset=utf-8')\n      resp.end(data.replace(\n          /\\{\\{entry\\}\\}/g\n        , Object.keys(opts.entries || {})[0] || ''\n      ))\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-beefy/beefy/lib/handlers/live-reload.js":"module.exports = handleLiveReload\n\nvar responsify = require('response-stream')\n  , inject = require('script-injector')\n  , ignore = require('ignorepatterns')\n  , watch = require('chokidar').watch\n  , through = require('through')\n  , path = require('path')\n  , fs = require('fs')\n\nvar liveReloadCode = fs.readFileSync(\n    path.join(__dirname, '..', 'frontend-js', 'live-reload.js')\n  , 'utf8'\n)\n\nfunction handleLiveReload(opts, io, nextHandler) {\n  if(!opts.live) {\n    return nextHandler\n  }\n\n  var lastUpdate = Date.now()\n    , pending = []\n\n  watch(opts.cwd, {\n      ignored: ignore\n    , useFsEvents: true\n    , usePolling: false\n    , ignoreInitial: true\n  }).on('all', onupdate)\n\n  opts = opts.live\n  opts.rate = +opts.rate || 1000\n  opts.rate = Math.max(100, Math.min(opts.rate, 1000))\n\n  return handle\n\n  function handle(server, req, resp, parsed) {\n    if(parsed.pathname === '/-/live-reload') {\n      resp.writeHead(200, {'content-type': 'application/json'})\n\n      pending.push(function ontimeout() {\n        resp.end(JSON.stringify({\n            lastUpdate: lastUpdate\n        }))\n        pending.splice(pending.indexOf(ontimeout), 1)\n      })\n\n      return setTimeout(pending[pending.length - 1], 60000)\n    }\n\n    // script-injector expects to be able to wrap & execute\n    // the incoming code itself. so, we're wrapping it prior\n    // to handing it over.\n    var liveReloadInjection =   'function live() { (' + liveReloadCode + ')' +\n          '(' + lastUpdate + ',' + opts.rate + ') }'\n      , injector = inject(liveReloadInjection)\n      , lazyResponse\n      , piped\n\n    lazyResponse = responsify(through())\n    injector.pipe(resp)\n    injector.on('error', function(err) {\n      io.error(err.stack || err.message || 'script injection error')\n    })\n\n    lazyResponse\n      .on('setHeader', setHeaderListener)\n      .on('writeHead', writeHeadListener)\n\n    return nextHandler(server, req, lazyResponse, parsed)\n\n    function setHeaderListener(args, prevent) {\n      var isCType = args[0].toLowerCase() === 'content-type'\n        , isHTML = args[1].toLowerCase() === 'text/html'\n\n      if(isCType) {\n        if(isHTML) {\n          lazyResponse.pipe(injector)\n        } else {\n          lazyResponse.pipe(resp)\n        }\n\n        lazyResponse.removeListener('setHeader', setHeaderListener)\n        lazyResponse.removeListener('writeHead', writeHeadListener)\n      }\n    }\n\n    function writeHeadListener(args, prevent) {\n      var hasCType = 'content-type' in args[1]\n        , isHTML\n\n      isHTML = args[1]['content-type'] === 'text/html'\n\n      if(hasCType && isHTML) {\n        lazyResponse.pipe(injector)\n      } else {\n        lazyResponse.pipe(resp)\n      }\n\n      lazyResponse.removeListener('setHeader', setHeaderListener)\n      lazyResponse.removeListener('writeHead', writeHeadListener)\n    }\n  }\n\n  function onupdate() {\n    lastUpdate = Date.now()\n\n    // remove all functions from pending before\n    // calling them so we don't have 'em constantly\n    // indexOf-ing for themselves for no purpose.\n    var queued = pending.splice(0, pending.length)\n\n    for(var i = 0, len = queued.length; i < len; ++i) {\n      queued[i]()\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-beefy/beefy/lib/handlers/bundle.js":"module.exports = handleEntryPoints\n\nvar accumError = require('../accumulate-error.js')\n  , ansicolors = require('ansicolors')\n\n// opts = {\n//     entries: {\n//         <repr>: <path>\n//     }\n//   , bundler: {\n//         flags: []\n//       , command: \"\"\n//     }\n// }\nfunction handleEntryPoints(opts, io, nextHandler) {\n  var entries = opts.entries\n    , bundlerOpts\n\n  bundlerOpts = opts.bundler\n\n  if(!opts.entries || !opts.bundler) {\n    return nextHandler\n  }\n\n  if(bundlerOpts.legacy) {\n    return nextHandler\n  }\n\n  return handle\n\n  function handle(server, req, resp, parsed) {\n    if(!(parsed.pathname in entries) && !('browserify' in parsed.query)) {\n      return nextHandler(server, req, resp, parsed)\n    }\n\n    var entryPath = entries[parsed.pathname]\n      , args = bundlerOpts.flags.slice()\n      , bundler\n      , output\n\n    args.unshift(bundlerOpts.command.bundler, entryPath)\n    parsed.loggedPathname = ansicolors.magenta(\n        parsed.pathname + ' ➞ ' + args.map(toLocal).join(' ')\n    )\n    args.shift()\n    args.shift()\n\n    bundler = bundlerOpts.command(entryPath)\n    bundler.stderr.pipe(accumError(io.error, resp))\n    resp.setHeader('content-type', 'text/javascript')\n    bundler.stdout.pipe(resp)\n  }\n\n  function toLocal(file) {\n    return (file || '').replace(opts.cwd, '.')\n  }\n\n}\n","/home/travis/build/npmtest/node-npmtest-beefy/beefy/lib/handlers/static.js":"module.exports = handleStatic\n\nvar path = require('path')\n  , mime = require('mime')\n  , fs = require('fs')\n\nfunction handleStatic(opts, io, nextHandler) {\n  var cwd = opts.cwd || process.cwd()\n\n  return handle\n\n  function handle(server, req, resp, parsed) {\n    var filepath = path.join.apply(\n        path\n      , [cwd].concat(parsed.pathname.split('/'))\n    )\n\n    var check = [filepath]\n\n    if(/html/.test(req.headers.accept || '')) {\n      check.push(path.join(filepath, 'index.html'))\n      check.push(filepath + '.html')\n    }\n\n    return iter()\n\n    function iter() {\n      if(!check.length) {\n        return nextHandler(server, req, resp, parsed)\n      }\n\n      var currentPath = check.shift()\n\n      fs.lstat(currentPath, function(err, stat) {\n        if(err || stat.isDirectory()) {\n          return iter()\n        }\n\n        resp.setHeader('content-type', mime.lookup(currentPath))\n        fs.createReadStream(currentPath)\n          .pipe(resp)\n      })\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-beefy/beefy/lib/handlers/log.js":"module.exports = handleLog\n\nvar responsify = require('response-stream')\n  , ansicolors = require('ansicolors')\n  , bytesize = require('pretty-bytes')\n  , through = require('through')\n  , pad = require('leftpad')\n  , fs = require('fs')\n\n// to authors of other handlers:\n// if you want to add a special path to be\n// logged, attach `loggedPathname` to the `parsed`\n// url object.\nfunction handleLog(opts, io, nextHandler) {\n  if(!opts.log) {\n    return nextHandler\n  }\n\n  opts = opts.log\n\n  var colorEnabled =\n    (opts.color === undefined || opts.color) && io.isTTY\n\n  var statusDigitToColor = [\n      'brightBlack'\n    , 'brightBlack'\n    , 'green'\n    , 'magenta'\n    , 'yellow'\n    , 'red'\n  ]\n\n  return handle\n\n  function handle(server, req, resp, parsed) {\n    var stream = through(write, end)\n      , outer = responsify(stream)\n      , start = Date.now()\n      , size = 0\n\n    outer.pipe(resp)\n    nextHandler(server, req, outer, parsed)\n\n    function write(buf) {\n      size += buf.length\n      stream.queue(buf)\n    }\n\n    function end() {\n      var code = resp.statusCode + ''\n        , time = (Date.now() - start)\n        , output\n\n      output = [\n          ansicolors[statusDigitToColor[code[0]]](code)\n        , pad(time + 'ms', 6, ' ') + ' '\n        , ansicolors.brightBlack(\n              pad(bytesize(size).replace(' ', '').toUpperCase(), 9, ' ')\n          ) + ' '\n        , parsed.loggedPathname || parsed.pathname\n      ].join(' ')\n\n      if(!colorEnabled) {\n        output = output.replace(/\\x1B\\[([\\d;]+?)m/g, '')\n      }\n\n      io.log(output)\n      stream.queue(null)\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-beefy/beefy/lib/make-io.js":"module.exports = makeIO\n\nfunction makeIO(process, stdout, stderr) {\n  stdout = stdout || process.stdout\n  stderr = stderr || process.stderr\n\n  return {\n      isTTY: process.stdout.isTTY\n    , error: outputError\n    , log: outputLog\n  }\n\n  function outputLog(what) {\n    stdout.write(what)\n    stdout.write('\\n')\n  }\n\n  function outputError(what) {\n    stderr.write(what)\n    stderr.write('\\n')\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-beefy/beefy/lib/args-to-options.js":"module.exports = parse\n\nvar minimist = require('minimist')\n  , path = require('path')\n\nvar normalizeEntryPoints = require('./normalize-entry-points.js')\n  , setupBundler = require('./setup-bundlers.js')\n  , extractPort = require('./extract-port.js')\n\nfunction parse(argv, cwd, ready) {\n  var idx = argv.length\n    , nestLevel = 0\n\n  for(var i = 0, len = argv.length; i < len; ++i) {\n    if(argv[i] === '[') {\n      ++nestLevel\n    } else if(argv[i] === ']') {\n      --nestLevel\n    }\n\n    if(argv[i] === '--' && !nestLevel) {\n      idx = i\n\n      break\n    }\n  }\n\n  var parsed = minimist(argv.slice(0, idx))\n    , bundlerFlags = argv.slice(idx + 1)\n    , legacyBundlerMode = false\n    , entryPoints\n\n  // open options\n  parsed.open = parsed.o || parsed.open\n  parsed.url = parsed.u || parsed.url || parsed.open\n  parsed.help = parsed.h || parsed.help\n  parsed.port = parsed.p || parsed.port\n\n  // handler options\n  parsed.cwd = parsed.cwd || cwd\n  parsed.live = parsed.l || parsed.live\n  parsed.debug = parsed.d || parsed.debug\n  parsed.bundler = parsed.browserify || parsed.bundler\n  parsed.watchify = parsed.watchify === undefined ? true : parsed.watchify\n  parsed.index = parsed.i || parsed.index\n\n  if(!parsed.bundler && parsed.debug !== 'false') {\n    if(bundlerFlags.indexOf('-d') === -1) {\n      bundlerFlags.unshift('-d')\n    }\n  }\n\n  extractPort(parsed, ongotport)\n\n  function ongotport(err, port, remain) {\n    entryPoints = normalizeEntryPoints(remain)\n    parsed.port = port\n\n    if(parsed.bundler) {\n      legacyBundlerMode = true\n\n      return onbundler(null, parsed.bundler)\n    }\n\n    setupBundler(\n        cwd\n      , entryPoints\n      , bundlerFlags\n      , !parsed.watchify\n      , onbundler\n    )\n  }\n\n  function onbundler(err, bundler) {\n    if(err) {\n      return ready(err)\n    }\n\n    parsed.bundler = bundler\n\n    return buildOutput()\n  }\n\n  function buildOutput() {\n    var openOptions = {\n        openURL: (typeof parsed.url === 'string' && parsed.url) ||\n                 ('http://127.0.0.1:' + parsed.port)\n      , openBrowser: !!(parsed.open || parsed.url)\n      , showHelp: !!parsed.help\n      , port: parsed.port\n    }\n\n    var hasColor = {\n        color: parsed.color === undefined || parsed.color\n    }\n\n    var handlerOptions = {\n        live: parsed.live ? {rate: 2000} : false\n      , generatedIndex: parsed.index\n      , entries: entryPoints\n      , log: hasColor\n      , cwd: parsed.cwd\n      , realCwd: cwd\n    }\n\n    handlerOptions.bundler = {\n        command: parsed.bundler\n      , flags: bundlerFlags\n      , legacy: legacyBundlerMode\n    }\n\n    ready(null, {\n        handler: handlerOptions\n      , open: openOptions\n    })\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-beefy/beefy/lib/normalize-entry-points.js":"module.exports = normalizeEntryPoints\n\nvar path = require('path')\n  , url = require('url')\n\nfunction normalizeEntryPoints(entryPoints) {\n  // entryPoint ::= file \":\" repr\n  //              | \":\" repr\n  //              | file\n  //\n  // file ::= relativePath\n  //        | absolutePath\n  //        | implicitRelativePath\n  //\n  // relativePath ::= \".\" path\n  //\n  // absolutePath ::= <path-sep> path\n  //\n  // implicitRelativePath ::= path\n  //\n  // path ::= [^\\s]+\n  //\n  // repr ::= [^\\s]+\n  // -------------------------\n  // output is `{repr: path, ...}`.\n  // repr's *always* use `/`.\n  // path's *may* use `\\`.\n\n  var output = {}\n\n  for(var i = 0, len = entryPoints.length; i < len; ++i) {\n    addEntryPoint(output, entryPoints[i])\n  }\n\n  return output\n}\n\nfunction addEntryPoint(output, entryPoint) {\n  var colonIdx = entryPoint.indexOf(':')\n\n  if(colonIdx !== -1) {\n    // `repr: null` from \":repr\"\n    if(colonIdx === 0) {\n      output[normRepr(entryPoint.slice(1))] = null\n\n      return\n    }\n\n    // `repr: path` from \"path:repr\"\n    entryPoint = entryPoint.split(':')\n    output[normRepr(entryPoint[1])] = normPath(entryPoint[0])\n\n    return\n  }\n\n  output[normSlashes(normRepr(entryPoint))] = normPath(entryPoint)\n}\n\nfunction normRepr(repr) {\n  return '/' + repr.split(path.sep).join('/')\n}\n\nfunction normPath(filepath) {\n  return path.resolve(filepath)\n}\n\nfunction normSlashes(urlPath) {\n  urlPath = urlPath.replace(/\\/\\/+/g, '/')\n\n  return url.parse(url.resolve('http://localhost', urlPath)).path\n}\n","/home/travis/build/npmtest/node-npmtest-beefy/beefy/lib/setup-bundlers.js":"module.exports = setupBundler\n\nvar findGlobals = require('find-global-packages')\n  , resolve = require('resolve')\n  , path = require('path')\n\nvar setupBrowserify = require('./bundlers/browserify.js')\n  , setupWatchify = require('./bundlers/watchify.js')\n\n// local watchify, local browserify ->\n// global watchify, global browserify\nfunction setupBundler(cwd, entryPoints, flags, noWatchify, ready) {\n  noWatchify ?\n    onlocalwatchify() :\n    resolve('watchify', {basedir: cwd}, onlocalwatchify)\n\n  function onlocalwatchify(err, localDir) {\n    if(err || !localDir) {\n      return resolve('browserify', {basedir: cwd}, onlocalbrowserify)\n    }\n\n    setupWatchify(path.dirname(localDir), entryPoints, flags, ready)\n  }\n\n  function onlocalbrowserify(err, localDir) {\n    if(err || !localDir) {\n      return findGlobals(onglobals)\n    }\n\n    setupBrowserify(path.dirname(localDir), entryPoints, flags, ready)\n  }\n\n  function onglobals(err, dirs) {\n    if(err) {\n      return ready(err)\n    }\n\n    dirs = dirs.sort()\n\n    for(var i = 0, len = dirs.length; i < len; ++i) {\n      if(!noWatchify && path.basename(dirs[i]) === 'watchify') {\n        return setupWatchify(dirs[i], entryPoints, flags, ready)\n      }\n\n      if(path.basename(dirs[i]) === 'browserify') {\n        return setupBrowserify(dirs[i], entryPoints, flags, ready)\n      }\n    }\n\n    return ready(new Error('Could not find a suitable bundler!'))\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-beefy/beefy/lib/bundlers/browserify.js":"module.exports = setupBrowserify\n\nvar through = require('through')\n\nfunction setupBrowserify(dir, entryPoints, flags, ready) {\n  var parseArgs = require(dir + '/bin/args.js')\n\n  instantiate.bundler = dir\n\n  return ready(null, instantiate)\n\n  function instantiate(entryPath) {\n    var stdout = through()\n      , stderr = through()\n      , bundle\n\n    bundle = parseArgs([entryPath].concat(flags))\n\n    bundle.bundle().on('error', function(err) {\n      stderr.end(err.stack + '')\n    }).pipe(stdout)\n\n    return {stderr: stderr, stdout: stdout}\n  }\n}\n\n","/home/travis/build/npmtest/node-npmtest-beefy/beefy/lib/extract-port.js":"module.exports = extractPort\n\nvar portfinder = require('portfinder')\n\nfunction extractPort(parsed, ready) {\n  var remain\n    , port\n\n  remain = parsed._.slice()\n  port = parsed.port\n\n  if(!isNaN(+remain[remain.length - 1]) && !parsed.port) {\n    port = +remain[remain.length - 1]\n    remain = remain.slice(0, -1)\n  }\n\n  if(port) {\n    return ready(null, port, remain)\n  }\n\n  portfinder.basePort = 9966\n  portfinder.getPort(function onport(err, port) {\n    if(err) {\n      return ready(err)\n    }\n\n    return ready(null, port, remain)\n  })\n}\n"}